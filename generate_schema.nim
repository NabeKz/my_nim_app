## スキーマファイル生成ツール
## データベースに接続してスキーマを取得し、Nimファイルを生成

import std/os
import std/strformat
import std/strutils
import std/sequtils
import std/tables
import db_connector/db_sqlite
import src/shared/schema_parser

# 中間構造体定義
type
  NimColumnInfo = object
    name: string
    sqliteType: string
    constraintsStr: string
  
  NimTableSchema = object
    tableName: string
    columns: seq[NimColumnInfo]

# SQLクエリ定数
const USER_TABLES_QUERY = sql"""
  SELECT sql FROM sqlite_master 
  WHERE type='table' 
    AND sql IS NOT NULL 
    AND name NOT LIKE 'sqlite_%'
"""

# スキーマファイルテンプレート定数
const SCHEMA_FILE_TEMPLATE = """
# Auto-generated database schema
# Generated by generate_schema.nim

import std/tables
import std/options
import src/shared/schema_parser

const GENERATED_SCHEMA* = block:
  var schema = DatabaseSchema(tables: initTable[string, TableSchema]())
  
$1

  schema
""".strip()

# データベースからCREATE文を取得
func extractCreateStatements*(conn: DbConn): seq[string] =
  debugEcho &"Extracting CREATE statements from database"

  conn
    .getAllRows(USER_TABLES_QUERY)
    .mapIt(it[0])

# 制約マッピング定数
const CONSTRAINT_MAP = [
  (ccPrimaryKey, "ccPrimaryKey"),
  (ccNotNull, "ccNotNull"),
  (ccUnique, "ccUnique"), 
  (ccAutoIncrement, "ccAutoIncrement")
]

# ヘルパー関数: 制約セットを文字列に変換
func constraintsToString(constraints: set[ColumnConstraint]): string =
  let parts = CONSTRAINT_MAP
    .filterIt(it[0] in constraints)
    .mapIt(it[1])
  
  "{" & parts.join(", ") & "}"

# ヘルパー関数: カラム情報を中間構造体に変換
func toNimColumnInfo(col: ColumnInfo): NimColumnInfo =
  NimColumnInfo(
    name: col.name,
    sqliteType: $col.sqliteType,
    constraintsStr: constraintsToString(col.constraints)
  )


# ヘルパー関数: テーブルスキーマを中間構造体に変換
func toNimTableSchema(tableName: string, tableSchema: TableSchema): NimTableSchema =
  NimTableSchema(
    tableName: tableName,
    columns: tableSchema.columns.mapIt(toNimColumnInfo(it))
  )

func `$`(self: NimColumnInfo): string =
  &"""    ColumnInfo(name: "{self.name}", sqliteType: {self.sqliteType}, constraints: {self.constraintsStr}),"""

func `$`(self: NimTableSchema): string =
  let columnsCode = self.columns
    .mapIt($it)
    .join("\n")
  
  (&"""
schema.tables["{self.tableName}"] = TableSchema(
  name: "{self.tableName}",
  columns: @[
{columnsCode}
  ]
)
""").strip()

# ヘルパー関数: 文字列にインデントを追加
func addIndent(text: string): string =
  let indent = " ".repeat(2)
  indent & text.replace("\n", "\n" & indent)

# ヘルパー関数: 全スキーマをNimコードに変換
func generateSchemaCode(dbSchema: DatabaseSchema): string =
  let tablesCode = dbSchema.tables
    .pairs
    .toSeq
    .mapIt(toNimTableSchema(it[0], it[1]))
    .mapIt(addIndent $it)
    .join("\n\n")
  
  SCHEMA_FILE_TEMPLATE % [tablesCode]


when isMainModule:
  if paramCount() < 1:
    echo "Usage: nim r generate_schema.nim <database_path>"
    echo "       For testing: nim r tests/test_schema_generation.nim"
    quit(1)
  
  let dbPath = paramStr(1)
  if not fileExists(dbPath):
    echo &"Error: Database file '{dbPath}' not found"
    quit(1)
  
  echo &"Processing database: {dbPath}"
  
  # データベースからCREATE文を取得
  let conn = open(dbPath, "", "", "")
  let createStatements = extractCreateStatements(conn)
  
  # スキーマを解析
  echo "Parsing database schema..."
  let dbSchema = parseSchemaFromCreateStatements(createStatements)
  
  # 両方のファイルを生成
  echo "Generating schema file: db_schema.nim"
  writeFile("db_schema.nim", generateSchemaCode(dbSchema))
  echo "Schema file generated: db_schema.nim"
  
  echo "Generating type definitions: generated_types.nim"
  writeFile("generated_types.nim", generateAllNimTypes(dbSchema))
  echo "Type definitions generated: generated_types.nim"
  
  echo "✅ Schema generation completed!"