#!/usr/bin/env nim
## スキーマファイル生成ツール
## データベースに接続してスキーマを取得し、Nimファイルを生成

import std/os
import std/strformat
import std/strutils
import std/sequtils
import std/tables
import db_connector/db_sqlite
import src/shared/schema_parser

proc generateSchemaFile*(dbPath: string, outputPath: string) =
  echo &"Generating schema from database: {dbPath}"
  
  # データベースに接続
  let conn = open(dbPath, "", "", "")
  defer: conn.close()
  
  # スキーマ情報を取得
  let rows = conn.getAllRows(sql"SELECT sql FROM sqlite_master WHERE type='table' AND sql IS NOT NULL")
  let schemaOutput = rows.mapIt(it[0]).join("\n\n")
  
  # スキーマを解析
  let dbSchema = parseSchemaFromSqliteOutput(schemaOutput)
  
  # Nimコードを生成
  var nimCode = """# Auto-generated database schema
# Generated by generate_schema.nim

import std/tables
import std/options
import src/shared/schema_parser

const GENERATED_SCHEMA* = block:
  var schema = DatabaseSchema(tables: initTable[string, TableSchema]())
  
"""
  
  # 各テーブルのスキーマを追加
  for tableName, tableSchema in dbSchema.tables:
    nimCode.add(&"  schema.tables[\"{tableName}\"] = TableSchema(\n")
    nimCode.add(&"    name: \"{tableName}\",\n")
    nimCode.add("    columns: @[\n")
    
    for col in tableSchema.columns:
      let constraintsStr = if col.constraints.card == 0:
        "{}"
      else:
        var parts: seq[string] = @[]
        if ccPrimaryKey in col.constraints: parts.add("ccPrimaryKey")
        if ccNotNull in col.constraints: parts.add("ccNotNull") 
        if ccUnique in col.constraints: parts.add("ccUnique")
        if ccAutoIncrement in col.constraints: parts.add("ccAutoIncrement")
        "{" & parts.join(", ") & "}"
      
      nimCode.add(&"      ColumnInfo(name: \"{col.name}\", sqliteType: {col.sqliteType}, constraints: {constraintsStr}),\n")
    
    nimCode.add("    ]\n")
    nimCode.add("  )\n\n")
  
  nimCode.add("  schema\n")
  
  # ファイルに書き出し
  writeFile(outputPath, nimCode)
  echo &"Schema file generated: {outputPath}"

# 型定義も生成
proc generateTypeDefinitions*(dbSchema: DatabaseSchema, outputPath: string) =
  let typeCode = generateAllNimTypes(dbSchema)
  writeFile(outputPath, typeCode)
  echo &"Type definitions generated: {outputPath}"

proc testInMemorySchema() =
  # テスト用のインメモリデータベースを作成
  let conn = open(":memory:", "", "", "")
  defer: conn.close()
  
  # サンプルテーブルを作成
  conn.exec(sql"""
    CREATE TABLE users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT UNIQUE,
      age INTEGER,
      created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
  """)
  
  conn.exec(sql"""
    CREATE TABLE books (
      id INTEGER PRIMARY KEY,
      title TEXT NOT NULL,
      author TEXT NOT NULL,
      isbn TEXT UNIQUE,
      price REAL,
      published_year INTEGER
    )
  """)
  
  conn.exec(sql"""
    CREATE TABLE user_books (
      user_id INTEGER NOT NULL,
      book_id INTEGER NOT NULL,
      borrowed_at TEXT,
      returned_at TEXT,
      PRIMARY KEY (user_id, book_id),
      FOREIGN KEY (user_id) REFERENCES users(id),
      FOREIGN KEY (book_id) REFERENCES books(id)
    )
  """)
  
  echo "=== インメモリデータベースでスキーマ生成テスト ==="
  
  # スキーマ情報を取得
  let rows = conn.getAllRows(sql"SELECT sql FROM sqlite_master WHERE type='table' AND sql IS NOT NULL")
  let schemaOutput = rows.mapIt(it[0]).join("\n\n")
  
  echo "取得したCREATE文:"
  echo schemaOutput
  echo ""
  
  # スキーマを解析
  let dbSchema = parseSchemaFromSqliteOutput(schemaOutput)
  
  echo "解析結果:"
  for tableName, tableSchema in dbSchema.tables:
    echo &"  テーブル: {tableName}"
    for col in tableSchema.columns:
      echo &"    - {col.name}: {col.sqliteType} {col.constraints}"
  echo ""
  
  # ファイル生成（dbSchemaを直接使用）
  echo "スキーマファイル生成中..."
  let typeCode = generateAllNimTypes(dbSchema)
  writeFile("generated_types.nim", typeCode)
  echo "Type definitions generated: generated_types.nim"
  
  # スキーマ定数ファイルも生成
  var nimCode = """# Auto-generated database schema
# Generated by generate_schema.nim

import std/tables
import std/options
import src/shared/schema_parser

const GENERATED_SCHEMA* = block:
  var schema = DatabaseSchema(tables: initTable[string, TableSchema]())
  
"""
  
  # 各テーブルのスキーマを追加
  for tableName, tableSchema in dbSchema.tables:
    nimCode.add(&"  schema.tables[\"{tableName}\"] = TableSchema(\n")
    nimCode.add(&"    name: \"{tableName}\",\n")
    nimCode.add("    columns: @[\n")
    
    for col in tableSchema.columns:
      let constraintsStr = if col.constraints.card == 0:
        "{}"
      else:
        var parts: seq[string] = @[]
        if ccPrimaryKey in col.constraints: parts.add("ccPrimaryKey")
        if ccNotNull in col.constraints: parts.add("ccNotNull") 
        if ccUnique in col.constraints: parts.add("ccUnique")
        if ccAutoIncrement in col.constraints: parts.add("ccAutoIncrement")
        "{" & parts.join(", ") & "}"
      
      nimCode.add(&"      ColumnInfo(name: \"{col.name}\", sqliteType: {col.sqliteType}, constraints: {constraintsStr}),\n")
    
    nimCode.add("    ]\n")
    nimCode.add("  )\n\n")
  
  nimCode.add("  schema\n")
  
  writeFile("db_schema.nim", nimCode)
  echo "Schema file generated: db_schema.nim"
  
  echo "インメモリDB→ファイル生成完了！"

when isMainModule:
  testInMemorySchema()