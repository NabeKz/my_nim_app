#!/usr/bin/env nim
## スキーマファイル生成ツール
## データベースに接続してスキーマを取得し、Nimファイルを生成

import std/os
import std/strformat
import std/strutils
import std/sequtils
import std/tables
import db_connector/db_sqlite
from src/shared/schema_parser import parseSchemaFromCreateStatements, generateAllNimTypes, DatabaseSchema, ColumnConstraint, ccPrimaryKey, ccNotNull, ccUnique, ccAutoIncrement

proc generateSchemaFile*(dbPath: string, outputPath: string) =
  echo &"Generating schema from database: {dbPath}"
  
  # データベースに接続
  let conn = open(dbPath, "", "", "")
  defer: conn.close()
  
  # スキーマ情報を取得（システムテーブルを除外）
  let rows = conn.getAllRows(sql"SELECT sql FROM sqlite_master WHERE type='table' AND sql IS NOT NULL AND name NOT LIKE 'sqlite_%'")
  let createStatements = rows.mapIt(it[0])
  
  # スキーマを解析（効率的な新しい方法）
  let dbSchema = parseSchemaFromCreateStatements(createStatements)
  
  # Nimコードを生成
  var nimCode = """# Auto-generated database schema
# Generated by generate_schema.nim

import std/tables
import std/options
import src/shared/schema_parser

const GENERATED_SCHEMA* = block:
  var schema = DatabaseSchema(tables: initTable[string, TableSchema]())
  
"""
  
  # 各テーブルのスキーマを追加
  for tableName, tableSchema in dbSchema.tables:
    nimCode.add(&"  schema.tables[\"{tableName}\"] = TableSchema(\n")
    nimCode.add(&"    name: \"{tableName}\",\n")
    nimCode.add("    columns: @[\n")
    
    for col in tableSchema.columns:
      let constraintsStr = if col.constraints.card == 0:
        "{}"
      else:
        var parts: seq[string] = @[]
        if ccPrimaryKey in col.constraints: parts.add("ccPrimaryKey")
        if ccNotNull in col.constraints: parts.add("ccNotNull") 
        if ccUnique in col.constraints: parts.add("ccUnique")
        if ccAutoIncrement in col.constraints: parts.add("ccAutoIncrement")
        "{" & parts.join(", ") & "}"
      
      nimCode.add(&"      ColumnInfo(name: \"{col.name}\", sqliteType: {col.sqliteType}, constraints: {constraintsStr}),\n")
    
    nimCode.add("    ]\n")
    nimCode.add("  )\n\n")
  
  nimCode.add("  schema\n")
  
  # ファイルに書き出し
  writeFile(outputPath, nimCode)
  echo &"Schema file generated: {outputPath}"

# 型定義も生成
proc generateTypeDefinitions*(dbSchema: DatabaseSchema, outputPath: string) =
  let typeCode = generateAllNimTypes(dbSchema)
  writeFile(outputPath, typeCode)
  echo &"Type definitions generated: {outputPath}"

when isMainModule:
  if paramCount() < 1:
    echo "Usage: nim r generate_schema.nim <database_path>"
    echo "       For testing: nim r tests/test_schema_generation.nim"
    quit(1)
  
  let dbPath = paramStr(1)
  if not fileExists(dbPath):
    echo &"Error: Database file '{dbPath}' not found"
    quit(1)
  
  echo &"Processing database: {dbPath}"
  generateSchemaFile(dbPath, "db_schema.nim")
  
  # 型定義も生成
  let conn = open(dbPath, "", "", "")
  let rows = conn.getAllRows(sql"SELECT sql FROM sqlite_master WHERE type='table' AND sql IS NOT NULL AND name NOT LIKE 'sqlite_%'")
  let createStatements = rows.mapIt(it[0])
  conn.close()
  
  let dbSchema = parseSchemaFromCreateStatements(createStatements)
  generateTypeDefinitions(dbSchema, "generated_types.nim")
  
  echo "✅ Schema generation completed!"